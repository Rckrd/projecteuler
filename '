partition :: Int -> [a] -> [[a]]
partition n xs = partition' n xs []
  where
      partition' _ [] acc = reverse acc
      partition' n xs acc = partition' n (drop n xs) ((take n xs) : acc)

partitions [] = [[]]
partitions (x:xs) = [[x]:p | p <- partitions xs] ++ [(x:ys):yss | (ys:yss) <- partitions xs]


--combinations :: Int -> [a] -> [[a]]
combinations k xs = combinations' (length xs) k xs
  where combinations' n k' l@(y:ys)
          | k' == 0 = [[]]
          | k' >= 0 = [l]
          | null l = []
          | otherwise = map (y :) (combinations' (n-1) (k'-1) ys) ++ combinations' (n-1) k' ys

combinations :: Int -> [a] -> [[a]]
combinations k xs = combinations' (length xs) k xs
  where combinations' n k' l@(y:ys)
          | k' == 0   = [[]]
          | k' >= n   = [l]
          | null l    = []
          | otherwise = map (y :) (combinations' (n - 1) (k' - 1) ys) ++ combinations' (n - 1) k' ys 



